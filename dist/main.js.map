{"version":3,"sources":["webpack:///webpack/bootstrap e5ca13639c21ed4a1ce6","webpack:///./Main.ts","webpack:///./Game.ts","webpack:///./PlayerBase.ts","webpack:///./Common.ts","webpack:///./Player.ts","webpack:///./Projectile.ts","webpack:///./Waves.ts","webpack:///./Invaders.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA,wBAAuB,eAAe;AACtwBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,wBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,uCAAsC;AACtC,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA,IAAG;;;;;;;ACxXH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,OAAO;AACvC;AACA;AACA,yBAAwB,OAAO;AAC/B;AACA;AACA,yBAAwB,OAAO;AAC/B;AACA;AACA,yBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,WAAU;AACV,wBAAuB,QAAQ;AAC/B,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;;;;;;;ACzDA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,wBAAuB,SAAS;AAChC,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,wBAAuB,SAAS;AAChC,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3HA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,SAAS;AAChfile":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e5ca13639c21ed4a1ce6\n **/","var Game_1 = require(\"./Game\");\nvar game = new Game_1[\"default\"]();\n//game.handleCollisions.bind(game);\nwindow.addEventListener(\"keydown\", (game.onKeyDown.bind(game)));\nwindow.addEventListener(\"keyup\", (game.onKeyUp.bind(game)));\nfunction gameLoop() {\n    requestAnimationFrame(gameLoop);\n    // Drawing code goes here\n    game.update();\n    game.draw();\n}\ngameLoop();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Main.ts\n ** module id = 1\n ** module chunks = 0\n **/","var PlayerBase_1 = require(\"./PlayerBase\");\nvar Player_1 = require(\"./Player\");\nvar Waves_1 = require(\"./Waves\");\nvar Common_1 = require(\"./Common\");\nvar Game = (function () {\n    function Game() {\n        this.waveNumber = 0;\n        this.NUMBER_OF_STARS = 50;\n        this.FPS = 45; // this will depend on latency\n        this.enemies = [];\n        this.playerBullets = [];\n        this.enemyBulletsSideA = [];\n        this.canvas = document.getElementById('canvas');\n        this.stats = {\n            count: 0,\n            fps: 0,\n            update: 0,\n            draw: 0,\n            frame: 0 // update + draw\n        };\n        //background scenery objects\n        this.playerBaseHeight = 20;\n        this.playBaseColor = \"blue\";\n        this.spaceColor = \"black\";\n        this.stars = [];\n        //for the key events\n        this.rightDown = false;\n        this.leftDown = false;\n        this.upDown = false;\n        this.downDown = false;\n        this.space = false;\n        this.lastFrame = this.timestamp(); //init to current time\n        this.context2D = this.canvas.getContext(\"2d\");\n        this.canvas.width = Game.CANVAS_WIDTH;\n        this.canvas.height = Game.CANVAS_HEIGHT;\n        this.createBases();\n        this.initGame();\n    }\n    //elapsedTime: number;\n    Game.prototype.update = function () {\n        var start = this.timestamp();\n        var elapsedTime = start - this.lastFrame;\n        var elapsedReduced = (elapsedTime / 1000.0) * Common_1.GAME_DEFAULTS.GAME_SPEED; // send dt as seconds\n        this.updateBullets(elapsedReduced);\n        this.updatePlayer(elapsedReduced);\n        this.updateEnemies(elapsedReduced);\n        this.updateBases();\n        this.handleCollisions();\n        var middle = this.timestamp();\n        this.draw();\n        var end = this.timestamp();\n        this.updateStats(middle - start, end - middle);\n        this.lastFrame = start;\n        if (this.enemies.length === 0) {\n            this.nextWave();\n        }\n    };\n    Game.prototype.timestamp = function () {\n        return new Date().getTime();\n    };\n    Game.prototype.createBases = function () {\n        this.bases = new Array(); // clear old one if there\n        var noOfBases = 4;\n        var spacing = Game.CANVAS_WIDTH / noOfBases;\n        for (var i = 0; i < noOfBases; i++) {\n            this.bases.push(new PlayerBase_1.PlayerBase(new Common_1.CartesianCoordinate(spacing / 2 + (spacing * i), Game.CANVAS_HEIGHT - 150)));\n        }\n    };\n    Game.prototype.onKeyDown = function (evt) {\n        if (evt.keyCode == Common_1.KEYS.RIGHT)\n            this.rightDown = true;\n        else if (evt.keyCode == Common_1.KEYS.LEFT)\n            this.leftDown = true;\n        else if (evt.keyCode == Common_1.KEYS.UP)\n            this.upDown = true;\n        else if (evt.keyCode == Common_1.KEYS.DOWN)\n            this.downDown = true;\n        if (evt.keyCode == Common_1.KEYS.SPACE) {\n            this.space = true;\n            this.playerBullets.push(this.player.shoot());\n        }\n        ;\n    };\n    Game.prototype.onKeyUp = function (evt) {\n        if (evt.keyCode == Common_1.KEYS.RIGHT)\n            this.rightDown = false;\n        if (evt.keyCode == Common_1.KEYS.LEFT)\n            this.leftDown = false;\n        if (evt.keyCode == Common_1.KEYS.UP)\n            this.upDown = false;\n        if (evt.keyCode == Common_1.KEYS.DOWN)\n            this.downDown = false;\n        if (evt.keyCode == Common_1.KEYS.SPACE)\n            this.space = false;\n    };\n    Game.prototype.initGame = function () {\n        //bottom middle\n        this.player = new Player_1[\"default\"](new Common_1.CartesianCoordinate(Game.CANVAS_WIDTH / 2, Game.CANVAS_HEIGHT - this.playerBaseHeight - Player_1[\"default\"].DEFAULT_HEIGHT));\n        this.player.OnShoot = function (bullet) {\n            this.playerBullets.push(bullet);\n        };\n        this.nextWave();\n        this.createStars();\n    };\n    Game.prototype.drawBackground = function () {\n        var self = this;\n        self.stars.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        self.context2D.fillStyle = self.spaceColor;\n        self.context2D.fillRect(0, 0, Game.CANVAS_WIDTH, Game.CANVAS_HEIGHT);\n        self.context2D.fillStyle = self.playBaseColor;\n        self.context2D.fillRect(0, Game.CANVAS_HEIGHT - self.playerBaseHeight, Game.CANVAS_WIDTH, self.playerBaseHeight);\n    };\n    Game.prototype.addEnemy = function (enemy) {\n        this.enemies.push(enemy);\n    };\n    // Reset the enemies for the next wave\n    Game.prototype.nextWave = function () {\n        this.waveNumber++;\n        this.waveNumber % 5 === 0 ? this.createBases() : null; //give the user new bases every 5 waves\n        switch (this.waveNumber) {\n            case 1:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave1();\n                    break;\n                }\n            case 2:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave2();\n                    break;\n                }\n            case 3:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave3();\n                    break;\n                }\n            case 4:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave4();\n                    break;\n                }\n            case 5:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave5();\n                    break;\n                }\n            case 6:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave6();\n                    break;\n                }\n            case 7:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave7();\n                    break;\n                }\n            case 8:\n                {\n                    this.enemies = Waves_1[\"default\"].Wave8();\n                    break;\n                }\n                alert(\"You win!! Well done.\");\n        }\n    };\n    //todo\n    Game.prototype.createStars = function () {\n        for (var i = 0; i <= this.NUMBER_OF_STARS; i++) {\n            var randX = Math.round(Math.random() * Game.CANVAS_WIDTH);\n            var randY = Math.round(Math.random() * Game.CANVAS_HEIGHT);\n        }\n    };\n    Game.prototype.collides = function (a, b) {\n        return a.position.x < b.position.x + b.dimensions.width &&\n            a.position.x + a.dimensions.width > b.position.x &&\n            a.position.y < b.position.y + b.dimensions.height &&\n            a.position.y + a.dimensions.height > b.position.y;\n    };\n    Game.prototype.handleCollisions = function () {\n        var self = this;\n        self.playerBullets.forEach(function (bullet) {\n            self.enemies.forEach(function (enemy) {\n                if (self.collides(bullet, enemy)) {\n                    enemy.takeHit(bullet);\n                    bullet.active = false;\n                }\n            });\n            //todo optimise for max base height\n            self.bases.forEach(function (base) {\n                base.particles.forEach(function (particle) {\n                    if (self.collides(bullet, particle)) {\n                        particle.explode();\n                        bullet.active = false;\n                    }\n                });\n            });\n        });\n        self.enemyBulletsSideA.forEach(function (bullet) {\n            if (self.collides(bullet, self.player)) {\n                self.player.explode();\n                bullet.active = false;\n            }\n            self.bases.forEach(function (base) {\n                base.particles.forEach(function (particle) {\n                    if (self.collides(bullet, particle)) {\n                        particle.explode();\n                        bullet.active = false;\n                    }\n                });\n            });\n        });\n    };\n    Game.prototype.draw = function () {\n        this.drawBackground();\n        this.player.draw(this.context2D);\n        var that = this;\n        this.enemies.forEach(function (thing) {\n            thing.draw(that.context2D);\n        });\n        this.playerBullets.forEach(function (thing) {\n            thing.draw(that.context2D);\n        });\n        this.enemyBulletsSideA.forEach(function (thing) {\n            thing.draw(that.context2D);\n        });\n        this.bases.forEach(function (thing) {\n            thing.draw(that.context2D);\n        });\n        this.drawStats(this.context2D);\n    };\n    Game.prototype.ReverseEnemyDirectionIfOutOfBoundsAndDropDown = function () {\n        var offset = 0;\n        for (var i = 0; i < this.enemies.length; i++) {\n            if (this.enemies[i].position.x < 0) {\n                offset = this.enemies[i].position.x;\n                break;\n            }\n            else if (this.enemies[i].position.x > (Game.CANVAS_WIDTH - this.enemies[i].dimensions.width)) {\n                offset = this.enemies[i].position.x - (Game.CANVAS_WIDTH - this.enemies[i].dimensions.width);\n                break;\n            }\n        }\n        if (offset === 0) {\n            return;\n        }\n        this.enemies.forEach(function (enemy) {\n            //moving to the right\n            enemy.vector.xVelocity = enemy.vector.xVelocity * -1;\n            enemy.position.x += offset * -1;\n            //   enemy.position.y += enemy.dimensions.height;\n            enemy.position.y += 10;\n        });\n    };\n    Game.prototype.updateEnemies = function (elapsedUnit) {\n        var self = this;\n        self.enemies = self.enemies.filter(function (enemy) {\n            return enemy.active;\n        });\n        self.enemies.forEach(function (enemy) {\n            enemy.update(elapsedUnit); // this might move things out of bounds so check next\n        });\n        self.ReverseEnemyDirectionIfOutOfBoundsAndDropDown();\n        //shoot after above check is done\n        self.enemies.forEach(function (enemy) {\n            if (Math.random() < enemy.probabilityOfShooting) {\n                var fire = enemy.shoot();\n                if (fire.hasOwnProperty(\"length\")) {\n                    self.enemyBulletsSideA = self.enemyBulletsSideA.concat(fire);\n                }\n                else {\n                    self.enemyBulletsSideA.push(fire);\n                }\n            }\n        });\n    };\n    /**\n     * Remove scenery that has been hit\n     */\n    Game.prototype.updateBases = function () {\n        var self = this;\n        self.bases.forEach(function (base) {\n            base.particles = base.particles.filter(function (particle) {\n                return particle.active;\n            });\n        });\n    };\n    Game.prototype.updatePlayer = function (elapsedTime) {\n        if (this.leftDown) {\n            this.player.vector.xVelocity = -this.player.DefaultMovementSpeed;\n        }\n        else if (this.rightDown) {\n            this.player.vector.xVelocity = this.player.DefaultMovementSpeed;\n        }\n        else if (this.upDown) {\n            this.player.vector.yVelocity = -this.player.DefaultMovementSpeed;\n        }\n        else if (this.downDown) {\n            this.player.vector.yVelocity = this.player.DefaultMovementSpeed;\n        }\n        else {\n            this.player.vector.xVelocity = 0;\n            this.player.vector.yVelocity = 0;\n        }\n        this.player.update(elapsedTime);\n        this.player.clamp(Game.CANVAS_WIDTH, Game.CANVAS_HEIGHT);\n    };\n    Game.prototype.updateBullets = function (elapsedUnit) {\n        this.playerBullets = this.playerBullets.filter(function (bullet) {\n            return bullet.active;\n        });\n        this.playerBullets.forEach(function (bullet) {\n            bullet.update(elapsedUnit);\n        });\n        this.enemyBulletsSideA = this.enemyBulletsSideA.filter(function (bullet) {\n            return bullet.active;\n        });\n        this.enemyBulletsSideA.forEach(function (bullet) {\n            bullet.update(elapsedUnit);\n        });\n    };\n    //Pluming\n    Game.prototype.addEvent = function (obj, type, fn) {\n        obj.addEventListener(type, fn, false);\n    };\n    Game.prototype.removeEvent = function (obj, type, fn) {\n        obj.removeEventListener(type, fn, false);\n    };\n    Game.prototype.resetStats = function () {\n        this.stats = {\n            count: 0,\n            fps: 0,\n            update: 0,\n            draw: 0,\n            frame: 0 // update + draw\n        };\n    };\n    //_______________________________________________________________________________todo remove this in prod\n    Game.prototype.updateStats = function (update, draw) {\n        this.stats.update = Math.max(1, update);\n        this.stats.draw = Math.max(1, draw);\n        this.stats.frame = this.stats.update + this.stats.draw;\n        this.stats.count = this.stats.count + 1;\n        this.stats.fps = Math.min(this.FPS, 1000 / this.stats.frame);\n    };\n    Game.prototype.drawStats = function (ctx) {\n        ctx.fillStyle = 'white';\n        ctx.fillText(\"frame: \" + Math.round(this.stats.count), Game.CANVAS_WIDTH - 100, Game.CANVAS_HEIGHT - 60);\n        ctx.fillText(\"fps: \" + Math.round(this.stats.fps), Game.CANVAS_WIDTH - 100, Game.CANVAS_HEIGHT - 50);\n        ctx.fillText(\"update: \" + Math.round(this.stats.update) + \"ms\", Game.CANVAS_WIDTH - 100, Game.CANVAS_HEIGHT - 40);\n        ctx.fillText(\"draw: \" + Math.round(this.stats.draw) + \"ms\", Game.CANVAS_WIDTH - 100, Game.CANVAS_HEIGHT - 30);\n        ctx.fillText(\"wave: \" + this.waveNumber, Game.CANVAS_WIDTH - 100, Game.CANVAS_HEIGHT - 20);\n    };\n    Game.prototype.loadImages = function (sources, callback) {\n        var images = {};\n        var count = sources ? sources.length : 0;\n        if (count == 0) {\n            callback(images);\n        }\n        else {\n            for (var n = 0; n < sources.length; n++) {\n                var source = sources[n];\n                var image = document.createElement('img');\n                images[source] = image;\n                this.addEvent(image, 'load', function () {\n                    if (--count == 0)\n                        callback(images);\n                });\n            }\n        }\n    };\n    Game.CANVAS_WIDTH = 800;\n    Game.CANVAS_HEIGHT = 600;\n    return Game;\n})();\nexports.__esModule = true;\nexports[\"default\"] = Game;\n//});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Game.ts\n ** module id = 2\n ** module chunks = 0\n **/","var Common_1 = require(\"./Common\");\nvar DestructibleScenery = (function () {\n    function DestructibleScenery(position) {\n        this.dimensions = new Common_1.Dimensions_2D(DestructibleScenery.DEFAULT_SIZE, DestructibleScenery.DEFAULT_SIZE);\n        this.color = \"#0F9\";\n        this.active = true;\n        this.position = position;\n    }\n    DestructibleScenery.prototype.draw = function (canvas) {\n        canvas.fillStyle = this.color;\n        if (this.active) {\n            canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n        }\n    };\n    DestructibleScenery.prototype.update = function (elapsedUnit) {\n    };\n    DestructibleScenery.prototype.explode = function () {\n        this.active = false;\n        // todo boom graphic\n    };\n    DestructibleScenery.DEFAULT_SIZE = 5;\n    return DestructibleScenery;\n})();\nexports.DestructibleScenery = DestructibleScenery;\n/**\n * The classic Green protective bases the player can hide behind\n */\nvar PlayerBase = (function () {\n    function PlayerBase(position) {\n        this.particles = [];\n        this.position = position;\n        /* base looks like this based on the dimensions of each particle; 7 DEFAULT_COLUMNS\n         -*****-\n         *******\n         *******\n         **   **\n         */\n        //position relative to the base\n        /*       for (var i = 0; i < 5; i++) {\n         this.particles.push(new DestructibleScenery(new CartesianCoordinate(position.x + DestructibleScenery.DEFAULT_SIZE * (i + 1), position.y)));\n         }\n         for (var i = 0; i < 7; i++) {\n         this.particles.push(new DestructibleScenery(new CartesianCoordinate(position.x + DestructibleScenery.DEFAULT_SIZE * i, position.y + DestructibleScenery.DEFAULT_SIZE * 1)));\n         }\n         for (var i = 0; i < 7; i++) {\n         this.particles.push(new DestructibleScenery(new CartesianCoordinate(position.x + DestructibleScenery.DEFAULT_SIZE * i, position.y + DestructibleScenery.DEFAULT_SIZE * 2)));\n         }\n         for (var i = 0; i < 7; i++) {\n         if (i !== 3 && i !== 4 && i !== 5)\n         {\n         this.particles.push(new DestructibleScenery(new CartesianCoordinate(position.x + DestructibleScenery.DEFAULT_SIZE * i, position.y + DestructibleScenery.DEFAULT_SIZE * 3)));\n         }\n         }*/\n        for (var i = 0; i < 18; i++) {\n            for (var j = 0; j < 10; j++) {\n                this.particles.push(new DestructibleScenery(new Common_1.CartesianCoordinate(position.x + DestructibleScenery.DEFAULT_SIZE * i, position.y + DestructibleScenery.DEFAULT_SIZE * j)));\n            }\n        }\n    }\n    PlayerBase.prototype.draw = function (canvas) {\n        var self = this;\n        self.particles.forEach(function (thing) {\n            thing.draw(canvas);\n        });\n    };\n    PlayerBase.prototype.update = function (elapsedUnit) {\n    };\n    PlayerBase.DEFAULT_COLUMNS = 7;\n    return PlayerBase;\n})();\nexports.PlayerBase = PlayerBase;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./PlayerBase.ts\n ** module id = 3\n ** module chunks = 0\n **/","exports.KEYS = {\n    BACKSPACE: 8,\n    TAB: 9,\n    RETURN: 13,\n    ESC: 27,\n    SPACE: 32,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    DELETE: 46,\n    HOME: 36,\n    END: 35,\n    PAGEUP: 33,\n    PAGEDOWN: 34,\n    INSERT: 45,\n    ZERO: 48,\n    ONE: 49,\n    TWO: 50,\n    A: 65,\n    L: 76,\n    P: 80,\n    Q: 81,\n    TILDA: 192\n};\n//think of these speeds as relative speeds t\nexports.GAME_DEFAULTS = {\n    GAME_SPEED: 50 // the higher the number the faster the game will run\n};\nvar CartesianCoordinate = (function () {\n    function CartesianCoordinate(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    return CartesianCoordinate;\n})();\nexports.CartesianCoordinate = CartesianCoordinate;\nvar Dimensions_2D = (function () {\n    function Dimensions_2D(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    return Dimensions_2D;\n})();\nexports.Dimensions_2D = Dimensions_2D;\n//todo create 3D vector if game will be ported to WebGl\n/**\n * signifies movement in 3D\n */\nvar Vector_2D = (function () {\n    function Vector_2D(xVelocity, yVelocity) {\n        this.xVelocity = 0; //by default bullets go straight down\n        this.xVelocity = xVelocity;\n        this.yVelocity = yVelocity;\n    }\n    return Vector_2D;\n})();\nexports.Vector_2D = Vector_2D;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Common.ts\n ** module id = 4\n ** module chunks = 0\n **/","var Common_1 = require(\"./Common\");\nvar Projectile_1 = require(\"./Projectile\");\nvar Player = (function () {\n    function Player(position) {\n        this.color = \"#F0A\";\n        this.dimensions = new Common_1.Dimensions_2D(Player.DEFAULT_WIDTH, Player.DEFAULT_HEIGHT);\n        this.vector = new Common_1.Vector_2D(0, 0);\n        this.DefaultMovementSpeed = 7;\n        this.position = position;\n    }\n    Player.prototype.draw = function (context2D) {\n        context2D.fillStyle = this.color;\n        context2D.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n        context2D.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n        // var path = new Path2D('M 100,100 h 50 v 50 h 50');\n        // context2D.stroke(path);\n    };\n    Player.prototype.update = function (elapsedUnit) {\n        this.position.x += this.vector.xVelocity * elapsedUnit;\n        this.position.y += this.vector.yVelocity * elapsedUnit;\n    };\n    Player.prototype.clamp = function (gameWidth, gameHeight) {\n        if (this.position.x < 0) {\n            this.position.x = 0;\n            return;\n        }\n        else if (this.position.x > (gameWidth - this.dimensions.width)) {\n            this.position.x = gameWidth - this.dimensions.width;\n            return;\n        }\n        else if (this.position.y < 0) {\n            this.position.y = 0;\n            return;\n        }\n        else if (this.position.y > (gameHeight - this.dimensions.height)) {\n            this.position.y = gameHeight - this.dimensions.height;\n            return;\n        }\n    };\n    Player.prototype.shoot = function () {\n        // todo Sound.play(\"shoot\");\n        var bulletPosition = this.midpoint();\n        return new Projectile_1.PlayerBullet(bulletPosition);\n    };\n    Player.prototype.midpoint = function () {\n        return new Common_1.CartesianCoordinate(this.position.x + this.dimensions.width / 2, this.position.y + this.dimensions.height / 2);\n    };\n    //todo\n    Player.prototype.explode = function () {\n        this.color = \"#F00\";\n    };\n    Player.DEFAULT_HEIGHT = 20;\n    Player.DEFAULT_WIDTH = 20;\n    return Player;\n})();\nexports.__esModule = true;\nexports[\"default\"] = Player;\n;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Player.ts\n ** module id = 5\n ** module chunks = 0\n **/","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Game_1 = require(\"./Game\");\nvar Common_1 = require(\"./Common\");\nvar Bullet = (function () {\n    function Bullet(position, vector) {\n        this.active = true;\n        this.position = position;\n        this.vector = vector;\n    }\n    Bullet.prototype.inBounds = function () {\n        return this.position.x >= 0 && (this.position.x - this.dimensions.width <= Game_1[\"default\"].CANVAS_WIDTH) &&\n            this.position.y >= 0 && (this.position.y - this.dimensions.height <= Game_1[\"default\"].CANVAS_HEIGHT);\n    };\n    Bullet.prototype.draw = function (canvas) {\n        canvas.fillStyle = this.color;\n        canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n    };\n    Bullet.prototype.update = function (elapsedUnit) {\n        this.position.x += this.vector.xVelocity * elapsedUnit;\n        this.position.y += this.vector.yVelocity * elapsedUnit;\n        this.active = this.active && this.inBounds();\n    };\n    Bullet.SLOW_MOVEMENT_SPEED = 2;\n    Bullet.MEDIUM_MOVEMENT_SPEED = 4;\n    Bullet.FAST_MOVEMENT_SPEED = 6;\n    Bullet.VERY_FAST_MOVEMENT_SPEED = 12;\n    Bullet.SMALL_SIZE = 3;\n    Bullet.LARGE_SIZE = 9;\n    return Bullet;\n})();\nexports.Bullet = Bullet;\nvar TinyBullet = (function (_super) {\n    __extends(TinyBullet, _super);\n    //Grunts usually fire this\n    function TinyBullet(postion, isFromPlayer, customVector) {\n        //players shoot upward\n        if (customVector === void 0) { customVector = null; }\n        if (!customVector) {\n            _super.call(this, postion, new Common_1.Vector_2D(0, isFromPlayer ? Bullet.SLOW_MOVEMENT_SPEED * -1 : Bullet.SLOW_MOVEMENT_SPEED));\n        }\n        else {\n            _super.call(this, postion, customVector);\n        }\n        this.dimensions = new Common_1.Dimensions_2D(Bullet.SMALL_SIZE, Bullet.SMALL_SIZE);\n        this.color = \"white\";\n        this.damageInflicted = 1;\n    }\n    return TinyBullet;\n})(Bullet);\nexports.TinyBullet = TinyBullet;\nvar PlayerBullet = (function (_super) {\n    __extends(PlayerBullet, _super);\n    //Grunts usually fire this\n    function PlayerBullet(postion, customVector) {\n        //players shoot upward\n        if (customVector === void 0) { customVector = null; }\n        if (!customVector) {\n            _super.call(this, postion, new Common_1.Vector_2D(0, Bullet.VERY_FAST_MOVEMENT_SPEED * -1));\n        }\n        else {\n            _super.call(this, postion, customVector);\n        }\n        this.dimensions = new Common_1.Dimensions_2D(Bullet.SMALL_SIZE, Bullet.SMALL_SIZE);\n        this.color = 0xAAAABB;\n        this.damageInflicted = 1;\n    }\n    return PlayerBullet;\n})(Bullet);\nexports.PlayerBullet = PlayerBullet;\nvar LargeBullet = (function (_super) {\n    __extends(LargeBullet, _super);\n    //stronger enemies usually fire this\n    function LargeBullet(postion, isFromPlayer, customVector) {\n        //super(postion, new Vector_2D(0, Bullet.FAST_MOVEMENT_SPEED));\n        if (customVector === void 0) { customVector = null; }\n        if (!customVector) {\n            _super.call(this, postion, new Common_1.Vector_2D(0, isFromPlayer ? Bullet.FAST_MOVEMENT_SPEED * -1 : Bullet.FAST_MOVEMENT_SPEED));\n        }\n        else {\n            _super.call(this, postion, customVector);\n        }\n        this.dimensions = new Common_1.Dimensions_2D(Bullet.LARGE_SIZE, Bullet.LARGE_SIZE);\n        this.color = \"yellow\";\n        this.damageInflicted = 3;\n    }\n    return LargeBullet;\n})(Bullet);\nexports.LargeBullet = LargeBullet;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Projectile.ts\n ** module id = 6\n ** module chunks = 0\n **/","var Invaders_1 = require(\"./Invaders\");\nvar Common_1 = require(\"./Common\");\nexports.__esModule = true;\nexports[\"default\"] = {\n    Wave1: function () {\n        var arr = [];\n        var horizontalGap = 10;\n        var verticalGap = 10;\n        for (var i = 0; i <= 6; i++) {\n            for (var j = 0; j <= 3; j++) {\n                var enemy;\n                enemy = new Invaders_1.EnemyGrunt(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n                arr.push(enemy);\n            }\n        }\n        return arr;\n    },\n    Wave2: function () {\n        var arr = [];\n        var horizontalGap = 10;\n        var verticalGap = 10;\n        for (var i = 0; i <= 6; i++) {\n            for (var j = 0; j <= 3; j++) {\n                if (j == 0) {\n                    var enemy = new Invaders_1.EnemyBoss(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                }\n                else {\n                    enemy = new Invaders_1.EnemyGrunt(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                }\n                enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n                arr.push(enemy);\n            }\n        }\n        return arr;\n    },\n    Wave3: function () {\n        var arr = [];\n        var horizontalGap = 10;\n        var verticalGap = 10;\n        for (var i = 0; i <= 8; i++) {\n            for (var j = 0; j <= 3; j++) {\n                if (j == 0 || j === 1) {\n                    var enemy = new Invaders_1.EnemyBoss(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                }\n                else {\n                    enemy = new Invaders_1.EnemyGrunt(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                }\n                enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n                arr.push(enemy);\n            }\n        }\n        return arr;\n    },\n    Wave4: function () {\n        var arr = [];\n        var horizontalGap = 10;\n        var verticalGap = 10;\n        for (var i = 0; i <= 7; i++) {\n            for (var j = 0; j <= 2; j++) {\n                var enemy = new Invaders_1.EnemyBoss(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n                arr.push(enemy);\n            }\n        }\n        return arr;\n    },\n    Wave5: function () {\n        var arr = [];\n        var enemy = new Invaders_1.EnemyKing(new Common_1.CartesianCoordinate(10 + (Invaders_1.Enemy.DEFAULT_WIDTH), 10));\n        enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n        arr.push(enemy);\n        return arr;\n    },\n    Wave6: function () {\n        var arr = [];\n        var horizontalGap = 10;\n        var verticalGap = 10;\n        for (var i = 0; i < 2; i++) {\n            var enemy = new Invaders_1.EnemyKing(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.EnemyKing.DEFAULT_WIDTH + horizontalGap), 10));\n            enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n            arr.push(enemy);\n        }\n        return arr;\n    },\n    Wave7: function () {\n        var arr = [];\n        var horizontalGap = 10;\n        var verticalGap = 10;\n        for (var i = 0; i < 2; i++) {\n            var enemy = new Invaders_1.EnemyKing(new Common_1.CartesianCoordinate(150 + i * (Invaders_1.EnemyKing.DEFAULT_WIDTH + horizontalGap), 10));\n            enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n            arr.push(enemy);\n        }\n        for (var i = 0; i <= 10; i++) {\n            for (var j = 0; j <= 3; j++) {\n                var enemy;\n                enemy = new Invaders_1.EnemyGrunt(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (verticalGap + Invaders_1.EnemyKing.DEFAULT_HEIGHT + j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n                arr.push(enemy);\n            }\n        }\n        return arr;\n    },\n    Wave8: function () {\n        var arr = [];\n        var horizontalGap = 10;\n        var verticalGap = 10;\n        for (var i = 0; i < 2; i++) {\n            var enemy = new Invaders_1.EnemyKing(new Common_1.CartesianCoordinate(150 + i * (Invaders_1.EnemyKing.DEFAULT_WIDTH + horizontalGap), 10));\n            enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n            arr.push(enemy);\n        }\n        for (var i = 0; i <= 12; i++) {\n            for (var j = 0; j <= 2; j++) {\n                var enemy;\n                enemy = new Invaders_1.EnemyBoss(new Common_1.CartesianCoordinate(10 + i * (Invaders_1.Enemy.DEFAULT_WIDTH + horizontalGap), (verticalGap + Invaders_1.EnemyKing.DEFAULT_HEIGHT + j * (Invaders_1.Enemy.DEFAULT_HEIGHT + verticalGap))));\n                enemy.vector.xVelocity = Invaders_1.Enemy.DEFAULT_HORIZONTAL_SPEED;\n                arr.push(enemy);\n            }\n        }\n        return arr;\n    }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Waves.ts\n ** module id = 7\n ** module chunks = 0\n **/","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Projectile_1 = require(\"./Projectile\");\nvar Common_1 = require(\"./Common\");\nvar Enemy = (function () {\n    function Enemy(position) {\n        this.dimensions = new Common_1.Dimensions_2D(Enemy.DEFAULT_WIDTH, Enemy.DEFAULT_HEIGHT);\n        this.vector = new Common_1.Vector_2D(0, 0);\n        this.active = true;\n        this.probabilityOfShooting = 0.0005; // on each game frame\n        this.position = position;\n    }\n    Enemy.prototype.draw = function (canvas) {\n        canvas.fillStyle = this.BasicColor;\n        canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n    };\n    Enemy.prototype.midpoint = function () {\n        return new Common_1.CartesianCoordinate(this.position.x + this.dimensions.width / 2, this.position.y + this.dimensions.height / 2);\n    };\n    Enemy.prototype.explode = function () {\n        this.active = false;\n        // todo boom graphic\n    };\n    Enemy.prototype.takeHit = function (bullet) {\n        this.health -= bullet.damageInflicted;\n        if (this.health <= 0) {\n            this.explode();\n        }\n    };\n    Enemy.prototype.update = function (elapsedUnit) {\n        this.position.x += this.vector.xVelocity * elapsedUnit;\n        //this.position.x+= this.xVelocity;\n        //this.position.y+= this.yVelocity;\n        //   this.active = this.active && this.inBounds();\n    };\n    Enemy.prototype.shootTinyBullet = function () {\n        var bulletPosition = this.midpoint();\n        var bulletToBeFired = new Projectile_1.TinyBullet(bulletPosition, false);\n        return bulletToBeFired;\n    };\n    Enemy.prototype.shootSmallFan = function () {\n        var num = 10;\n        //shoot at angle 225 - 295 degress\n        var arr = [];\n        for (var i = 0; i < num; i++) {\n            var angle = 225 + i * (90 / num);\n            var radAngle = (angle / 360) * 2 * Math.PI;\n            var customVector = new Common_1.Vector_2D(-Math.cos(radAngle), -Math.sin(radAngle));\n            arr.push(new Projectile_1.TinyBullet(this.midpoint(), false, customVector));\n        }\n        return arr;\n    };\n    Enemy.prototype.shootLargeSlowfan = function () {\n        var num = 50;\n        //shoot at angle 225 - 295 degress\n        var arr = [];\n        for (var i = 0; i < num; i++) {\n            var angle = 225 + i * (90 / num);\n            var radAngle = (angle / 360) * 2 * Math.PI;\n            var customVector = new Common_1.Vector_2D(-Math.cos(radAngle) / 2, -Math.sin(radAngle) / 2);\n            arr.push(new Projectile_1.TinyBullet(this.midpoint(), false, customVector));\n        }\n        return arr;\n    };\n    Enemy.prototype.shootLargeFastfan = function () {\n        var num = 50;\n        //shoot at angle 225 - 295 degress\n        var arr = [];\n        for (var i = 0; i < num; i++) {\n            var angle = 225 + i * (90 / num);\n            var radAngle = (angle / 360) * 2 * Math.PI;\n            var customVector = new Common_1.Vector_2D(-Math.cos(radAngle) * 3, -Math.sin(radAngle) * 3);\n            arr.push(new Projectile_1.LargeBullet(this.midpoint(), false, customVector));\n        }\n        return arr;\n    };\n    Enemy.prototype.shoot = function () {\n        return this.shootTinyBullet();\n    };\n    Enemy.DEFAULT_HEIGHT = 12;\n    Enemy.DEFAULT_WIDTH = 30;\n    Enemy.DEFAULT_HORIZONTAL_SPEED = 2;\n    return Enemy;\n})();\nexports.Enemy = Enemy;\nvar EnemyGrunt = (function (_super) {\n    __extends(EnemyGrunt, _super);\n    function EnemyGrunt(position) {\n        _super.call(this, position);\n        this.BasicColor = \"#0F9\";\n        this.probabilityOfShooting = 0.001;\n        this.health = 1;\n    }\n    EnemyGrunt.prototype.shoot = function () {\n        // todo Sound.play(\"shoot\");\n        return this.shootTinyBullet();\n    };\n    return EnemyGrunt;\n})(Enemy);\nexports.EnemyGrunt = EnemyGrunt;\nvar EnemyBoss = (function (_super) {\n    __extends(EnemyBoss, _super);\n    function EnemyBoss(position) {\n        _super.call(this, position);\n        this.probabilityOfShootingLargeBulletWhenShootong = 0.2;\n        this.probabilityOfShootingScatterWhenShooting = 0.2;\n        this.BasicColor = \"RED\";\n        this.probabilityOfShooting = 0.003;\n        this.health = 3;\n    }\n    EnemyBoss.prototype.shoot = function () {\n        // todo Sound.play(\"shoot\");\n        var bulletToFire;\n        var x = Math.random();\n        if (x >= 0 && x <= 0.3) {\n            bulletToFire = this.shootTinyBullet();\n        }\n        if (x > 0.3 && x <= 0.4) {\n            bulletToFire = this.shootSmallFan();\n        }\n        //slow fan of 100\n        if (x > 0.4 && x <= 0.5) {\n            // return this.shootLargeSlowfan();\n            bulletToFire = this.shootLargeFastfan();\n        }\n        else if (x > 0.5 && x < 1) {\n            bulletToFire = new Projectile_1.LargeBullet(this.midpoint(), false);\n        }\n        return bulletToFire;\n    };\n    return EnemyBoss;\n})(Enemy);\nexports.EnemyBoss = EnemyBoss;\nvar EnemyKing = (function (_super) {\n    __extends(EnemyKing, _super);\n    function EnemyKing(position) {\n        _super.call(this, position);\n        this.BasicColor = \"WHITE\";\n        this.probabilityOfShooting = 0.03;\n        this.health = 15;\n        this.dimensions = new Common_1.Dimensions_2D(100, 40);\n    }\n    EnemyKing.prototype.shoot = function () {\n        // todo Sound.play(\"shoot\");\n        var x = Math.random();\n        var bulletToFire;\n        if (x >= 0 && x <= 0.25) {\n            bulletToFire = this.shootTinyBullet();\n        }\n        if (x > 0.25 && x <= 0.45) {\n            bulletToFire = this.shootSmallFan();\n        }\n        //slow fan of 100\n        if (x > 0.45 && x <= 0.5) {\n            // return this.shootLargeSlowfan();\n            bulletToFire = this.shootLargeFastfan();\n        }\n        else if (x > 0.5 && x < 1) {\n            bulletToFire = new Projectile_1.LargeBullet(this.midpoint(), false);\n        }\n        return bulletToFire;\n    };\n    EnemyKing.DEFAULT_WIDTH = 100;\n    EnemyKing.DEFAULT_HEIGHT = 40;\n    return EnemyKing;\n})(Enemy);\nexports.EnemyKing = EnemyKing;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Invaders.ts\n ** module id = 8\n ** module chunks = 0\n **/"],"sourceRoot":""}